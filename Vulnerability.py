# -*- coding: utf-8 -*-
import socket
import datetime
import urllib.request
import requests
from bs4 import BeautifulSoup
import re
import sys
from urllib import parse
from urllib.request import urlopen
import time
import os
from fpdf import FPDF


def scan(domain):
    module_name = "Port Scan"
    contents = ""
    is_cve = "Safe"

    comport = {"FTP": 21, "SMTP": 25, "HTTP": 80}
    ad = domain
    adip = socket.gethostbyname(ad)
    for PN, port in comport.items():
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            result = s.connect_ex((adip, port))
            banner = s.recv(1024)
            if result == 0:
                contents += str(port) + "/tcp(" + str(PN) + ") Open "
                is_cve = "Risk"
            elif banner == b'':
                contents += str(port) + "/tcp(" + str(PN) + ") noservice\n"
            s.close()
        except:
            continue
    return (module_name, contents.strip(), is_cve)


def adpage(domain):
    module_name = "Admin Page"
    contents = ""
    is_cve = "Safe"

    page = ["/admin", "/manager", "/master", "/system", "/administart"]
    url = "http://" + domain
    for pages in page:
        try:
            req = urllib.request.urlopen(url + pages)
            contents += (pages + " server exist\n")
            is_cve = "Risk"
        except: continue
    if is_cve == "Safe":
        contents += "no admin page found"
    return (module_name, contents.strip(), is_cve)

def get_header(domain):
    global req, header, dic, cve
    req = requests.get('http://'+domain)
    header = req.headers
    dic = {'server' : 'hidden', 'os' : 'hidden', 'lang' : 'hidden'}
    cve = {'server' : '', 'lang' : ''}
    if 'Server' in header:
        server=header['Server']
        s = server.split(' ')
        for i, a in enumerate(dic.keys()):
            dic[a] = s[i]
            if (len(s) < len(dic)):
                break
    else:
        pass

def check_cve(get_header):
    module_name = "Check CVE"
    contents = ""
    is_cve = "Safe"
    def cve1(key, contents, is_cve):
        r = requests.get('https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword='+str(dic[key]))
        soup = BeautifulSoup(r.text, 'html.parser')
        count_target = soup.find(class_="smaller")
        cve[key] = count_target.find("b").text
        list_result = str(soup.select("#TableWithRules"))
        list_result = re.sub('<.+?>','',list_result,0).strip()
        if len(list_result) > 26:
            contents += 'https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword='+str(dic[key])
            is_cve = "Risk"
        return contents, is_cve
    if dic['server'] != 'hidden':
        contents, is_cve = cve1('server', contents, is_cve)
    if dic['lang'] != 'hidden':
        contents, is_cve = cve1('lang', contents, is_cve)
    if contents == "":
        contents = "no cve found"
    return (module_name, contents.strip(), is_cve)

def help():
    print('Usage: ./main url')
    sys.exit(1)

def sqlinjection():
    sqlinjection_mysql = ['or 1=1--', '\' or 1=1--',
                          '\" or 1=1--',
                          '\' or \'1\'=\'1',
                          '\" or \"1\"=\"1']

    sqlinjection_oracle = ['\' or 1=1#', '\" or 1=1#',
                           'or 1=1#',
                           '\' or \'1\'=\'1',
                           '\" or \"1\"=\"1']
    return sqlinjection_mysql[1]


def send_post(data, next_url):
    is_cve = "Safe"
    header = {'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:66.0) Gecko/20100101Firefox / 66.0',
              'Accept': 'text / html, application / xhtml + xml, application / xml;q = 0.9, * / *;q = 0.8',
              'Accept - Language': 'en - US, en;q = 0.5',
              'Accept - Encoding': 'gzip, deflate', }
    resp = requests.post(next_url, data=data, headers=header)
    if "Sign Off" in resp.text:
        is_cve = "Risk"
    return (is_cve)

def get_domain(url):
    domainp = '^(https?:\/\/)?([\da-z\.-]+)'
    domain = re.compile(domainp).match(url).group()
    return domain

def sqltest(url):
    module_name = "SQL Injection"
    is_cve = "Safe"
    url = "http://" + url + "/login.jsp"
    r = requests.get(url).text
    soup = BeautifulSoup(r, 'html.parser')
    tags = soup.select("form input")

    idp = re.compile("id=\"[a-zA-Z]*id[a-z]*\"")
    for tag in tags:
        try:
            result = idp.search(str(tag)).group()
            id_value = result.replace("id=", "").replace("\"", "")
            break
        except AttributeError:
            result = None

    pw_value = soup.select('form input[type=password]')[0]['name']
    submit = soup.select('form input[type=submit]')
    submitp = re.compile("\"[a-zA-Z]*[L|l]ogin[a-zA-Z]*\"")
    subnetname = submitp.search(str(submit)).group().replace("\"", "")
    tags = soup.select("form")
    formp = re.compile("<form action=\"[a-zA-Z]*[L|l]ogin\"")
    actionvaluep = re.compile("\"[a-zA-Z]*\"")

    for tag in tags:
        result = formp.search(str(tag))
    if result != None:
        action_value = actionvaluep.search(result.group()).group().replace("\"", "")

    domain = get_domain(url)
    next_url = domain + "/" + action_value
    data = {id_value: sqlinjection(), pw_value: 'donecare'}
    contents = str(data)
    send_post(data, next_url)
    is_cve = send_post(data, next_url)
    return (module_name, contents.strip(), is_cve)
